[
  {
    "id": 1710768470261,
    "name": "Daniel",
    "textarea": "const carritoCompras=require('../index');\n\ndescribe('probando testind',()=>{\n    it('verdadero es igual a verdadero', () => {\n        expect(true).toBe(true);\n    });\n})\n// Desarrolla una clase en JavaScript llamada CarritoCompra que represente un carrito de compras. La clase debe tener los siguientes métodos:\ndescribe('Instancia de carro de compras',()=>{\n    it('Instacia',()=>{\n        let newCarrito= new carritoCompras()\n        expect(newCarrito).toBeInstanceOf(carritoCompras);\n    });\n});\n// constructor(): Inicializa el carrito como un array vacío.\n// Investigar para crear testing sin crear el constructor en el index.\ndescribe('Constructor',()=>{\n    it('Propiedades',()=>{\n        let newCarrito= new carritoCompras()\n       //console.log (newCarrito.productos);\n       expect(newCarrito.productos).toEqual([])\n\n\n    });\n\n})\n// agregarProducto(producto): Recibe un objeto representando un producto y lo agrega al carrito.\ndescribe('Agragar producto',()=>{\n    let newCarrito= new carritoCompras()\n    const producto1={nombre:'vegetales',precio:50,cantidad:10};\n    // const agregarProducto=(productoParametro)=>{\n    // newCarrito.productos.push(productoParametro)}\n    // agregarProducto(producto1);\n    newCarrito.agregarProducto(producto1);\n\n    \n\n   // console.log(newCarrito.productos);\n    it('agregado',()=>{\n   \n        expect(newCarrito.productos).toEqual([producto1]);\n    })\n    \n})\n// calcularTotal(): Calcula el total de la compra sumando los precios de todos los productos en el carrito.\ndescribe('calcular total',()=>{\n    it('Multiplicar cantidad y precio',()=>{\n        let newCarrito= new carritoCompras()\n        const producto1={nombre:'vegetales',precio:50,cantidad:10};\n        newCarrito.agregarProducto(producto1);\n        newCarrito.agregarProducto(producto1);\n       // console.log(newCarrito.productos[0].precio)\n       \n       \n        // const calcularTotal=()=> {  let sumaDeProductos=0;\n       \n        //     for(let i=0 ;i<newCarrito.productos.length; i++){\n        //      const precio=newCarrito.productos[i].precio\n        //      const cantidad=newCarrito.productos[i].cantidad\n        //      const totalDeUnSoloObjeto=precio*cantidad;\n        //      sumaDeProductos+=totalDeUnSoloObjeto;\n     \n            \n        //  }\n        //  console.log(sumaDeProductos); \n\n        //  return sumaDeProductos;\n    \n        // }\n\n       expect(newCarrito.calcularTotal()).toBe(1000);\n    })\n})\n\n// aplicarDescuento(porcentaje): Aplica un descuento al total de la compra según el porcentaje especificado.\ndescribe('Aplicar descuento',()=>{\n    it('10% de descuento',()=>{\n        const newCarrito= new carritoCompras();\n        const producto1={nombre:'vegetales',precio:50,cantidad:10};\n        newCarrito.agregarProducto(producto1);\n        \n    //     const aplicarDescuento=(porcentaje)=>{\n    //         const precioTotal= newCarrito.calcularTotal();\n    //         return precioTotal - (precioTotal*((porcentaje/100)))\n\n    //    }\n        //console.log(aplicarDescuento(10));\n\n        expect(newCarrito.aplicarDescuento(10)).toBe(450);\n    })\n})"
  },
  {
    "id": 1710811439632,
    "name": "Gaston",
    "textarea": "const CarritoCompra = require(\"../index\");\nlet newCarritoCompra;\nbeforeEach(() => {\n  newCarritoCompra = new CarritoCompra();\n});\n\ndescribe(\"Inicializa el carrito\", () => {\n  console.log(newCarritoCompra);\n  it(\"Lo inicializa con un array vacio\", () => {\n    expect(newCarritoCompra.carrito).toEqual([]);\n  });\n  it(\"verificar si es clase\", () => {\n    expect(typeof newCarritoCompra).toBe(\"object\");\n    expect(typeof CarritoCompra).toBe(\"function\");\n  });\n  it(\"verificar si tiene metodo agregarProducto\", () => {\n    expect(newCarritoCompra.agregarProducto).toBeDefined();\n  });\n});\n\ndescribe(\"Recibe un objeto representando un producto\", () => {\n  it(\"Lo recibe y lo agrega al carrito\", () => {\n    const Producto1 = { name: \"producto 1\", price: 30, quantity: 2 };\n    expect(newCarritoCompra.agregarProducto(Producto1)).not.toEqual([]);\n  });\n});\n\ndescribe(\"Calcula el total de la compra\", () => {\n  const Producto1 = { name: \"producto 1\", price: 30, quantity: 2 };\n  const Producto2 = { name: \"producto 2\", price: 50, quantity: 4 };\n  const Producto3 = { name: \"producto 3\", price: 90, quantity: 6 };\n  it(\"Sumando los precios de todos los productos\", () => {\n    newCarritoCompra.agregarProducto(Producto1);\n    newCarritoCompra.agregarProducto(Producto2);\n    newCarritoCompra.agregarProducto(Producto3);\n    expect(newCarritoCompra.calcularTotal()).toEqual(Producto1.price + Producto2.price + Producto3.price); // el 30 es momentaneo\n  });\n});\n\ndescribe(\"Aplicar un descuento al total de la compra\", () => {\n  it(\"Segun un descuento especificado\", () => {\n    expect(newCarritoCompra.aplicarDescuento(10)).toBeLessThanOrEqual(225);\n  });\n});"
  },
  {
    "id": 1710863851681,
    "name": "Frank GP",
    "textarea": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst router = express();\n\nrouter.set(\"view engine\", \"ejs\");\n\n// Middleware\nrouter.use(express.urlencoded({ extended: true }));\nrouter.use(express.static(path.join(__dirname, \"public\")));\nrouter.use(express.json());\n\n// Set the views directory\nrouter.set(\"views\", path.join(__dirname, \"views\"));\n\n// const dataFilePath = \"notepadData.json\";\nconst dataFilePath = path.join(__dirname, \"notepadData.json\");\n\n// Check if notepadData.json exists, if not, create it with an empty array\nif (!fs.existsSync(dataFilePath)) {\n  fs.writeFileSync(dataFilePath, \"[]\");\n}\n\nrouter.get(\"/\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"index\", { jsonData: \"\" });\n      return;\n    }\n    res.render(\"index\", { jsonData: data });\n  });\n});\n\nrouter.get(\"/add\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"add\", { jsonData: \"\" });\n      return;\n    }\n    res.render(\"add\", { jsonData: data });\n  });\n});\n\nrouter.get(\"/admin\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"admin\", { jsonData: \"\" });\n      return;\n    }\n    res.render(\"admin\", { jsonData: data });\n  });\n});\n\n// Add a route to download the JSON data\nrouter.get(\"/download\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error downloading data\");\n      return;\n    }\n    res.setHeader(\"Content-Type\", \"application/json\");\n    res.setHeader(\"Content-Disposition\", \"attachment; filename=notepadData.json\");\n    res.send(data);\n  });\n});\n\nrouter.post(\"/\", (req, res) => {\n  console.log(req.body);\n  // res.json({ message: \"Data received successfully\", body: req.body });\n\n  const newData = {\n    id: Date.now(), // Use current timestamp as ID\n    name: req.body.name,\n    textarea: req.body.content, // Corrected property name\n  };\n  console.log(newData);\n\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error saving data\");\n      return;\n    }\n\n    let dataArray = [];\n    if (data) {\n      dataArray = JSON.parse(data);\n    }\n    // console.log(dataArray);\n    dataArray.push(newData);\n\n    fs.writeFile(dataFilePath, JSON.stringify(dataArray, null, 2), (err) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send(\"Error saving data\");\n        return;\n      }\n      // res.redirect(\"/\");\n      res.json({ message: \"Data received successfully\", body: req.body });\n    });\n  });\n});\n\nrouter.delete(\"/delete/:id\", (req, res) => {\n  const idToDelete = parseInt(req.params.id);\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error deleting data\");\n      return;\n    }\n    let dataArray = [];\n    if (data) {\n      dataArray = JSON.parse(data);\n    }\n    const updatedData = dataArray.filter((item) => item.id !== idToDelete);\n    fs.writeFile(dataFilePath, JSON.stringify(updatedData, null, 2), (err) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send(\"Error deleting data\");\n        return;\n      }\n      // res.redirect(\"/\");\n      res.json({ message: \"Data delete successfully\", body: req.body });\n    });\n  });\n});\n\n// Route to render the upload form\nrouter.get(\"/upload\", (req, res) => {\n  res.render(\"upload\");\n});\n\n// Route to handle uploaded JSON data\nrouter.post(\"/upload\", (req, res) => {\n  const jsonData = req.body.jsonData;\n\n  try {\n    const parsedData = JSON.parse(jsonData);\n\n    fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send(\"Error saving data\");\n        return;\n      }\n\n      let dataArray = [];\n      if (data) {\n        dataArray = JSON.parse(data);\n      }\n      // dataArray.push(...parsedData);\n\n      // Clear existing data before appending new data\n      dataArray = [];\n      // Append the parsed data to the existing array\n      dataArray.push(...parsedData);\n\n      // parsedData = dataArray;\n      fs.writeFile(dataFilePath, JSON.stringify(dataArray, null, 2), (err) => {\n        if (err) {\n          console.error(err);\n          res.status(500).send(\"Error saving data\");\n          return;\n        }\n        res.redirect(\"./\");\n      });\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(400).send(\"Invalid JSON data\");\n  }\n});\n\nmodule.exports = router;\n"
  },
  {
    "id": 1710916433658,
    "name": "Julian",
    "textarea": "const axios = require('axios')\n\nconst url = 'https://students-api.up.railway.app/movies'\n\n\n// fetch con promesas\n\nfetch(url)\n  .then(response => response.json())\n  .then(response2 => console.log(response2))\n  .catch(error => console.log(error))\n\n// axios con promesas\n// axios(url)\n//   .then(response => console.log(response.data))\n//   .then(response2 => console.log(response2.data))\n//   .catch(error => console.log(error))\n//   .finally(() => console.log('Esto se ejecuta siempre'))\n// console.log('chao');\n\n// fech con async await\n\n\nconst getMovies = async () => {\n  try {\n    console.log('hola');\n    const response  = await axios(url)\n    console.log('chao');\n    console.log(response.data)\n    \n  } catch (error) {\n    console.log(error.statusMessage);\n  }\n}\n\nconst getMostrarSaludos = () => {\n  console.log('hola');\n  console.log('hola2');\n  console.log('hola3');\n  console.log('hola4');\n}\n\n// console.log('antes'); //1\n// getMovies()\n// getMostrarSaludos()\n// console.log('despues');\n\n\n// promiss.all\n\n// const promesa1 = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve('Promesa 1 resuelta')\n//   }, 2000)\n// })\n\n// const promesa2 = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve('Promesa 2 resuelta')\n//   }, 4000)\n// }\n// )\n\n// promisss con then\n// Promise.all([promesa1, promesa2])\n// .then(response => console.log(response))\n// .catch(error => console.log(error))\n\n// promisss con async await\n// const getPromesas = async () => {\n//   try {\n//     const response = await Promise.all([promesa1, promesa2])\n//     console.log(response);\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n\n// const fs = require('fs')\n// fs\n\n// metodo de lectura de archivos\n\n// fs.readFile('pruebas.js', 'utf8', (error, data) => {\n//   if (error) {\n//     console.log(error);\n//   } else {\n//     console.log(data);\n//   }\n// })\n\n// metodo de escritura de archivos\n\n// fs.writeFile('pruebas.js', 'console.log(\"hola\")', (error) => {\n//   if (error) {\n//     console.log(error);\n//   } else {\n//     console.log('Archivo escrito');\n//   }\n// })\n\n// metodo de eliminacion de archivos\n\n// fs.unlink('pruebas.js', (error) => {  \n//   if (error) {\n//     console.log(error);\n//   } else {\n//     console.log('Archivo eliminado');\n//   }\n// })\n\n\n\n// pagina para probar localstorage\n\n// https://fgp.one/notepad/\n\n// metodos de localstorage\n\n// setItem\n// localStorage.setItem('nombre', 'Juan')\n\n// getItem\n// localStorage.getItem('nombre')\n"
  },
  {
    "id": 1710974066561,
    "name": "Gaston",
    "textarea": "const {handleApiResponse} = require(\"./cardsApi\")\n\n const apiContainer = document.querySelector(\".apiContainer\") // parte 1\n\n //tema axios\n\n axios.get(\"https://api.1rodemayo.com/movies\")\n\n .then( (res) => {\n      handleApiResponse(res.data, apiContainer)\n      console.log(res.data);\n })\n\n .catch( (err) => {\n    alert (\"error\")\n\n })\n\n //tema axios"
  },
  {
    "id": 1711062205984,
    "name": "Felipe H",
    "textarea": "document.addEventListener(\"DOMContentLoaded\", async () => {\n  const movieForm = document.getElementById(\"movieForm\");\n  const movieCardSection = document.querySelector(\".movie-card\");\n\n  movieForm.addEventListener(\"submit\", handleFormSubmit);\n\n  /*------------------------\nCarga de las cards .-\n------------------------*/\n\n  const allMovies = await getAllMovies();\n  allMovies.forEach((movie) => displayMovieCard(movie));\n\n  /*----------------------\n   Peticion get de las cards\n  ----------------------*/\n\n  async function getAllMovies() {\n    try {\n      const response = await fetch(\"http://localhost:3000/movies\");\n      if (!response.ok) {\n        throw new Error(\"No se pudo obtener la lista de películas\");\n      }\n      return response.json();\n    } catch (error) {\n      console.error(\"Error al obtener la lista de películas:\", error);\n      return [];\n    }\n  }\n\n  /*--------------------------\n  Funcion asincronica\n  --------------------------*/\n\n  async function handleFormSubmit(event) {\n    event.preventDefault();\n    const movieData = getFormData(movieForm);\n    try {\n      const movie = await sendMovieData(movieData);\n      displayMovieCard(movie);\n      const allMovies = await getAllMovies();\n      movieCardSection.innerHTML = \"\";\n      allMovies.forEach((movie) => displayMovieCard(movie));\n    } catch (error) {\n      console.error(\"Error al agregar la película:\", error);\n    }\n  }\n\n  /*     function handleFormSubmit(event) {\n            event.preventDefault();\n            const movieData = getFormData(movieForm);\n            sendMovieData(movieData)\n                .then(displayMovieCard)\n                .catch(error => console.error('Error al agregar la película:', error));\n        } */\n\n  function getFormData(form) {\n    const formData = new FormData(form);\n    const movieData = {};\n    for (const [key, value] of formData.entries()) {\n      movieData[key] = value;\n    }\n    return movieData;\n  }\n\n  async function sendMovieData(movieData) {\n    const response = await fetch(\"http://localhost:3000/movies\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(movieData),\n    });\n    if (!response.ok) {\n      throw new Error(\"No se pudo agregar la película\");\n    }\n    return response.json();\n  }\n\n  function createMovieCard(movie) {\n    const card = document.createElement(\"div\");\n    card.classList.add(\"card\");\n    card.innerHTML = `\n                <div class=\"col card-body\">\n                    <h5 class=\"card-title\">${movie.title}</h5>\n                    <img src=\"${movie.imageUrl}\" class=\"card-img-top\" alt=\"${movie.title}\">\n                    <p class=\"card-text\">Director: ${movie.director}</p>\n                    <p class=\"card-text\">Año: ${movie.year}</p>\n                    <p class=\"card-text\">Género: ${movie.genre}</p>\n                    <p class=\"card-text\">Duración: ${movie.duration} minutos</p>\n                    <p class=\"card-text\">Calificación: ${movie.rate}</p>\n                </div>\n            `;\n    return card;\n  }\n\n  function displayMovieCard(movie) {\n    const card = createMovieCard(movie);\n    movieCardSection.appendChild(card);\n    movieCardSection.style.display = \"block\";\n    card.style.display = \"block\";\n  }\n});\n"
  },
  {
    "id": 1711171216928,
    "name": "Frank GP",
    "textarea": "//notepad\n\nconst express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst notepadRouter = express();\n\nnotepadRouter.set(\"view engine\", \"ejs\");\n\n// Middleware\nnotepadRouter.use(express.urlencoded({ extended: true }));\nnotepadRouter.use(express.static(path.join(__dirname, \"public\")));\nnotepadRouter.use(express.json());\n\n// Set the views directory\nnotepadRouter.set(\"views\", path.join(__dirname, \"views\"));\n\n// const dataFilePath = \"notepadData.json\";\nconst dataFilePath = path.join(__dirname, \"notepadData.json\");\n\n// Check if notepadData.json exists, if not, create it with an empty array\nif (!fs.existsSync(dataFilePath)) {\n  fs.writeFileSync(dataFilePath, \"[]\");\n}\n\nnotepadRouter.get(\"/\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"index\", { jsonData: \"\" });\n      return;\n    }\n    res.render(\"index\", { jsonData: data });\n  });\n});\n\nnotepadRouter.get(\"/add\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"add\", { jsonData: \"\" });\n      return;\n    }\n    res.render(\"add\", { jsonData: data });\n  });\n});\n\nnotepadRouter.get(\"/admin\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"admin\", { jsonData: \"\" });\n      return;\n    }\n    res.render(\"admin\", { jsonData: data });\n  });\n});\n\n// Add a route to download the JSON data\nnotepadRouter.get(\"/download\", (req, res) => {\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error downloading data\");\n      return;\n    }\n    res.setHeader(\"Content-Type\", \"application/json\");\n    res.setHeader(\"Content-Disposition\", \"attachment; filename=notepadData.json\");\n    res.send(data);\n  });\n});\n\nnotepadRouter.post(\"/\", (req, res) => {\n  console.log(req.body);\n  // res.json({ message: \"Data received successfully\", body: req.body });\n\n  const newData = {\n    id: Date.now(), // Use current timestamp as ID\n    name: req.body.name.trim(), // Remove leading and trailing whitespace\n    textarea: req.body.content, // Corrected property name\n  };\n  console.log(newData);\n\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error saving data\");\n      return;\n    }\n\n    let dataArray = [];\n    if (data) {\n      dataArray = JSON.parse(data);\n    }\n    // console.log(dataArray);\n    dataArray.push(newData);\n\n    fs.writeFile(dataFilePath, JSON.stringify(dataArray, null, 2), (err) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send(\"Error saving data\");\n        return;\n      }\n      // res.redirect(\"/\");\n      res.json({ message: \"Data received successfully\", body: req.body });\n    });\n  });\n});\n\nnotepadRouter.delete(\"/delete/:id\", (req, res) => {\n  const idToDelete = parseInt(req.params.id);\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error deleting data\");\n      return;\n    }\n    let dataArray = [];\n    if (data) {\n      dataArray = JSON.parse(data);\n    }\n    const updatedData = dataArray.filter((item) => item.id !== idToDelete);\n    fs.writeFile(dataFilePath, JSON.stringify(updatedData, null, 2), (err) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send(\"Error deleting data\");\n        return;\n      }\n      // res.redirect(\"/\");\n      res.json({ message: \"Data delete successfully\", body: req.body });\n    });\n  });\n});\n\n// Route to render the upload form\nnotepadRouter.get(\"/upload\", (req, res) => {\n  res.render(\"upload\");\n});\n\n// Route to handle uploaded JSON data\nnotepadRouter.post(\"/upload\", (req, res) => {\n  const jsonData = req.body.jsonData;\n\n  try {\n    const parsedData = JSON.parse(jsonData);\n\n    fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send(\"Error saving data\");\n        return;\n      }\n\n      let dataArray = [];\n      if (data) {\n        dataArray = JSON.parse(data);\n      }\n      // dataArray.push(...parsedData);\n\n      // Clear existing data before appending new data\n      dataArray = [];\n      // Append the parsed data to the existing array\n      dataArray.push(...parsedData);\n\n      // parsedData = dataArray;\n      fs.writeFile(dataFilePath, JSON.stringify(dataArray, null, 2), (err) => {\n        if (err) {\n          console.error(err);\n          res.status(500).send(\"Error saving data\");\n          return;\n        }\n        res.redirect(\"./\");\n      });\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(400).send(\"Invalid JSON data\");\n  }\n});\n\nnotepadRouter.get(\"/:id\", (req, res) => {\n  const noteId = req.params.id;\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(\"Error reading data file\");\n      return;\n    }\n    try {\n      const notes = JSON.parse(data);\n      const note = notes.find((note) => note.id === parseInt(noteId));\n      if (!note) {\n        res.status(404).send(\"Note not found\");\n        return;\n      }\n      // console.log(note);\n      res.render(\"note\", { jsonData: [note] });\n    } catch (error) {\n      console.error(error);\n      res.status(500).send(\"Error parsing data file\");\n    }\n  });\n});\n\nnotepadRouter.get(\"/name/:name\", (req, res) => {\n  const noteName = req.params.name;\n  console.log(noteName);\n  fs.readFile(dataFilePath, \"utf8\", (err, data) => {\n    if (err) {\n      console.error(err);\n      res.render(\"error\", { message: \"Error reading notes file.\" });\n      return;\n    }\n\n    const notes = JSON.parse(data);\n    const matchingNotes = notes.filter((note) => note.name === noteName);\n\n    if (matchingNotes.length === 0) {\n      res.render(\"error\", { message: \"No notes found with the specified name.\" });\n      return;\n    }\n\n    // res.render(\"notes\", { notes: matchingNotes });\n    res.render(\"name.ejs\", { jsonData: matchingNotes });\n\n    // res.json(matchingNotes);\n  });\n});\n\nmodule.exports = notepadRouter;\n"
  }
]